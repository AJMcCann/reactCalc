{"version":3,"sources":["Components/Button.jsx","App.js","Components/Input.jsx","Components/ClearButton.jsx","serviceWorker.js","index.js"],"names":["Button","props","className","val","children","isNaN","onClick","handleClick","App","concatenateInput","setState","input","state","computeValue","eval","toString","e","SyntaxError","backspaceScreen","substring","length","this","handleClear","Component","Input","ClearButton","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c88576ae.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nconst isNotOperator = val => {\r\n    return !isNaN(val) || val === \".\" || val === \"=\" || val === \"(\" || val === \")\";\r\n}\r\n\r\nexport const Button = props => (\r\n    <div className={`button-wrapper ${isNotOperator(props.children) ? null : \"arithmetic-operator\"}`} onClick={() => props.handleClick(props.children)}>\r\n        {props.children}\r\n    </div>\r\n)\r\n\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {Button} from './Components/Button';\nimport {Input} from './Components/Input';\nimport {ClearButton} from './Components/ClearButton';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\"\n    }\n  }\n\n  concatenateInput = val => {\n    this.setState({input: this.state.input + val});\n  }\n\n  computeValue = () => {\n    try {\n      this.setState({input: eval(this.state.input).toString()});\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        this.setState({input: \"ERROR\"});\n      }\n    }\n  }\n\n  backspaceScreen = () => {\n    this.setState({input: this.state.input.substring(0,this.state.input.length-1)});\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"calc\">\n        <Input input={this.state.input}></Input>\n        <div className=\"row\">\n          <Button handleClick={this.concatenateInput}>(</Button>\n          <Button handleClick={this.concatenateInput}>)</Button>\n          <Button handleClick={this.backspaceScreen}>CE</Button>\n          <ClearButton handleClear={() => this.setState({input: \"\"})}>C</ClearButton>\n        </div>\n        <div className=\"row\">\n          <Button handleClick={this.concatenateInput}>7</Button>\n          <Button handleClick={this.concatenateInput}>8</Button>\n          <Button handleClick={this.concatenateInput}>9</Button>\n          <Button handleClick={this.concatenateInput}>/</Button>\n        </div>\n        <div className=\"row\">\n          <Button handleClick={this.concatenateInput}>4</Button>\n          <Button handleClick={this.concatenateInput}>5</Button>\n          <Button handleClick={this.concatenateInput}>6</Button> \n          <Button handleClick={this.concatenateInput}>*</Button>\n        </div>\n        <div className=\"row\">\n          <Button handleClick={this.concatenateInput}>1</Button>\n          <Button handleClick={this.concatenateInput}>2</Button>\n          <Button handleClick={this.concatenateInput}>3</Button>\n          <Button handleClick={this.concatenateInput}>-</Button>\n        </div>\n        <div className=\"row\">\n          <Button handleClick={this.concatenateInput}>0</Button>\n          <Button handleClick={this.concatenateInput}>.</Button>\n          <Button handleClick={this.computeValue}>=</Button>\n          <Button handleClick={this.concatenateInput}>+</Button>\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport './Input.css';\r\n\r\nexport const Input = props => <div className=\"input\">{props.input}</div>;","import React from 'react';\r\nimport './ClearButton.css';\r\n\r\nexport const ClearButton = props => (\r\n<div className=\"clear-button button-wrapper arithmetic-operator\" onClick={props.handleClear}>{props.children}</div>\r\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}